{"version":3,"file":"static/js/redux-toolkit.ede1ce8c.chunk.js","mappings":"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","sources":["Pages/Redux-Toolkit/components/Form.js","Pages/Redux-Toolkit/components/TodoItem.js","Pages/Redux-Toolkit/components/FirstName.js","Pages/Redux-Toolkit/components/LastName.js","Pages/Redux-Toolkit/components/User.js","Pages/Redux-Toolkit/components/PostItem.js","Pages/Redux-Toolkit/components/Posts.js","Pages/Redux-Toolkit/components/Styled/Styled.js","Pages/Redux-Toolkit/ReduxToolkit.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addTodo } from '../Features/Todo/TodoSlice'\nimport shortid from 'shortid';\nconst Form = () => {\n    const dispatch = useDispatch();\n    const [todoValue, setTodoValue] = React.useState('')\n    const addHandler = () => {\n        const todo = {\n            id: shortid.generate(),\n            text: todoValue,\n            completed:true,\n        };\n        dispatch(addTodo(todo))\n        setTodoValue('')\n    }\n        return (\n            <form onSubmit={(e) => e.preventDefault()}>\n                <input\n                    value={todoValue}\n                    type='text'\n                    placeholder='Type something...'\n                    onChange={(e) => setTodoValue(e.target.value)}\n                />\n                <button\n                    type='submit'\n                    onClick={() => addHandler()}\n                >\n                    Submit\n                </button>\n            </form>\n        )\n    }\n\n\nexport default Form\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport {toggleComplitedToodo,removeTodo} from '../Features/Todo/TodoSlice'\nconst TodoItem = ({todo}) => {\n    const dispatch = useDispatch();\n    const togleTodoHandler = (id) => {\n        dispatch(toggleComplitedToodo(id))\n    }\n    const removeTodoHandler = (id) => {\n        dispatch(removeTodo(id))\n    }\n    return (\n        <div style={{ display: \"flex\" } }>\n            <button style={{backgroundColor:\"green\"}}\n            onClick={()=>togleTodoHandler(todo.id)}\n                >\n                Complete</button>\n            <div style={todo.completed ? { color:\"green\",margin: \"10px\" }:{color:\"red\",margin:\"10px\"}} >\n               {todo.text}\n            </div>\n            <button\n                onClick={()=>removeTodoHandler(todo.id)}\n                style={{ backgroundColor: \"red\" }} >\n                Delete\n            </button>\n        </div>\n    )\n}\n\nexport default TodoItem\n","import React from 'react'\nimport { useSelector} from 'react-redux'\nconst FirstName = () => {\n    const name = useSelector((state) => state.user.firstName)\n    return <div>{name}</div>\n}\nexport default FirstName\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nconst LastName = () => {\nconst name=useSelector((state)=>state.user.lastName)\n    return <div >{ name}</div>\n}\n\nexport default LastName\n","import React from 'react'\nimport FirstName from './FirstName'\nimport LastName from './LastName'\nimport { useDispatch } from 'react-redux'\nimport {setFirstName,setLastName} from '../Features/User/UserSlice'\n\nconst User = () => {\n    const dispatch=useDispatch()\n    return (\n        <div >\n            <input\n                type='text'\n                placeholder='First Name'\nonChange={(e)=>dispatch(setFirstName(e.target.value))}\n            />\n            <input\n                type='text'\n                placeholder='Second Name'\nonChange={(e)=>dispatch(setLastName(e.target.value))}\n            />\n            <div>\n                <div >\n                    <div >First Name:</div>\n                    <div >\n                        <FirstName />\n                    </div>\n                </div>\n\n                <div >\n                    <div >Last Name:</div>\n                    <div >\n                        <LastName />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default User\n","import React from 'react'\n\nconst PostItem = () => {\n    return (\n        <div >\n            Post title\n        </div>\n    )\n}\n\nexport default PostItem\n","import React from 'react'\nimport PostItem from './PostItem'\n\nconst Posts = () => {\n    return (\n        <div>\n            <button\n                type='submit'\n\n            >\n                Get posts\n            </button>\n            <PostItem />\n        </div>\n    )\n}\n\nexport default Posts\n","import styled from 'styled-components';\r\n\r\nexport const Section = styled.section`\r\n\r\n @media screen and (min-width: 768px)and (max-width: 1200px) {\r\n  display:grid ;\r\ngrid-template-columns: 33% 33% 33%;\r\n\r\n  }\r\n  @media screen and (min-width: 1200px) {\r\n  display:grid ;\r\ngrid-template-columns: 33% 33% 33%;\r\n\r\n  }\r\n`\r\n\r\n","import React from 'react'\nimport Form from './components/Form'\nimport TodoItem from './components/TodoItem'\nimport User from './components/User'\nimport Posts from './components/Posts'\nimport {Section}from'./components/Styled/Styled'\nimport { useSelector } from 'react-redux/es/exports'\nfunction ReduxToolkit() {\n    const todos=useSelector((state)=>state.todo.todos)\n    return (\n                <Section >\n                    <div >\n                        <h1 >Redux Toolkit State Change</h1>\n                        <User />\n                    </div>\n                    <div >\n                        <h1 >Redux Toolkit Todo App</h1>\n                <Form />\n                {todos?.map(todo => ( <TodoItem key={todo.id} todo={todo} />)\n\n                )}\n\n                    </div>\n                    <div >\n                        <h1 >Redux Toolkit Async Thunk</h1>\n                        <Posts />\n                    </div>\n                </Section>\n    )\n}\n\nexport default ReduxToolkit\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["dispatch","useDispatch","React","todoValue","setTodoValue","onSubmit","e","preventDefault","value","type","placeholder","onChange","target","onClick","todo","id","shortid","text","completed","addTodo","addHandler","style","display","backgroundColor","toggleComplitedToodo","color","margin","removeTodo","name","useSelector","state","user","firstName","lastName","setFirstName","setLastName","Section","styled","todos","map","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","number","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}