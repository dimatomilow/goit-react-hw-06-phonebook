{"version":3,"file":"static/js/phonebook.0cfaff43.chunk.js","mappings":"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","sources":["Pages/Movie/component/BackLink/BackLink.js","Pages/Phomebook/Fopm/Form.Styled.js","Pages/Phomebook/Fopm/Form.jsx","Pages/Phomebook/Filter/Filter.jsx","Pages/Phomebook/Contacts/Contacts.jsx","Pages/Phomebook/AppPhoneBook.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import {useLocation,Link} from 'react-router-dom'\r\nconst BackLink = () => {\r\n    const location = useLocation();\r\n    return (\r\n<Link to={location?.state?.from ?? \"/\"}>Go back</Link>\r\n    );\r\n}\r\n\r\nexport default BackLink;","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  margin-top: 50px ;\r\n\r\n\r\n\r\n\r\n`","import { useState} from 'react'\r\nimport shortid from 'shortid';\r\nimport { Form } from './Form.Styled'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {saveContact} from '../../../Component/redux/contactsSlice '\r\n\r\n export function FormPhone() {\r\n     const  [name, setName] = useState('');\r\n     const [number, setNumber] = useState('');\r\n\r\n     const dispatch = useDispatch();\r\n     const items = useSelector(state => state.contacts.items);\r\n\r\n     const handleChange = e => {\r\n         const {name,value}=e.target\r\n         switch (name) {\r\n             case 'name':\r\n                 setName(value);\r\n                 break;\r\n             case 'number':\r\n                 setNumber(value);\r\n                 break;\r\n\r\n             default:\r\n                 return;\r\n         }\r\n\r\n     };\r\n\r\n   const handleSubmit = e => {\r\n       e.preventDefault();\r\n\r\n    const nameToAdd = items.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase() && contact.number === number,\r\n     );\r\n    if (nameToAdd) {\r\n      return alert(`${name} is already in contacts.`);\r\n     }\r\n     dispatch(saveContact({ id: shortid.generate(), name, number }));\r\n\r\n     setName('')\r\n     setNumber('')\r\n     };\r\n\r\n\r\n     return (\r\n<Form onSubmit={handleSubmit}>\r\n           <label htmlFor={shortid.generate()}>Name\r\n               <input\r\n              type=\"text\"\r\n              value={name}\r\n  name=\"name\"\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n              onChange={handleChange}\r\n/>\r\n                </label>\r\n                <label htmlFor={shortid.generate()}>Number\r\n                    <input type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        onChange={handleChange}\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n  required\r\n/>\r\n                </label>\r\n           <button type='submit'>Add contact</button>\r\n       </Form>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n","import { useDispatch } from 'react-redux';\r\nimport {updateFilter} from '../../../Component/redux/contactsSlice '\r\n\r\nexport const Filter = () => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n const filterChange = (e) => {\r\n     dispatch(updateFilter(e.currentTarget.value))\r\n    };\r\n\r\n    return (\r\n        <label>Find contacts by me\r\n            <input  name=\"filter\"\r\n                onChange={filterChange}\r\n                placeholder=\"Input name to find\">\r\n\r\n            </input>\r\n        </label>\r\n    );\r\n}\r\n\r\n;","import { useSelector,useDispatch } from 'react-redux'\r\nimport { deleteContact } from '../../../Component/redux/contactsSlice '\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Contacts = () => {\r\n    const dispatch = useDispatch()\r\n     const items = useSelector(state => state.contacts.items);\r\n    const filter = useSelector(state => state.contacts.filter);\r\n    const filteredContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n    return (\r\n\r\n\r\n    <ul>\r\n        {filteredContacts.map(({ id, name, number }) =>\r\n        (<li key={id}>\r\n            <p>{name}:<span>{number}</span></p>\r\n            <button onClick={() => dispatch(deleteContact(id))}>Delete</button>\r\n        </li>\r\n        ))}\r\n        </ul>\r\n\r\n        );}\r\n\r\n\r\n\r\n\r\nContacts.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n}","\r\n\r\nimport { FormPhone } from './Fopm/Form'\r\nimport { Filter } from './Filter/Filter'\r\nimport { Contacts } from './Contacts/Contacts'\r\nimport BackLink from '../Movie/component/BackLink/BackLink';\r\n// import { useSelector, useDispatch } from 'react-redux'\r\n// import { increment, decrement } from '../../Component/redux/contactsSlice '\r\n function AppPhoneBook() {\r\n\r\n\r\n\r\n\r\n  // const deleteContact = (contactId) => {\r\n  //   setContacts( contacts.filter(contact => contact.id !== contactId) )\r\n  // };\r\n\r\n\r\n\r\n    // const normalizeFilter = filter.toLowerCase();\r\n    // const filterContact = contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilter));\r\n    return (\r\n      <>\r\n        <BackLink/>\r\n        <FormPhone   />\r\n        <Filter />\r\n        <Contacts />\r\n        </>\r\n\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default AppPhoneBook","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["location","useLocation","to","state","from","Form","styled","FormPhone","useState","name","setName","number","setNumber","dispatch","useDispatch","items","useSelector","contacts","handleChange","e","target","value","onSubmit","preventDefault","find","contact","toLowerCase","alert","saveContact","id","shortid","htmlFor","type","pattern","title","required","onChange","Filter","updateFilter","currentTarget","placeholder","Contacts","filter","filteredContacts","includes","map","onClick","deleteContact","BackLink","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}